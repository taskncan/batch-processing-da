volumes:
  pgdata:

networks:
  data_pipeline:
    driver: bridge

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: always
    ports:
      - "2181:2181"
    networks:
      - data_pipeline

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - data_pipeline
  
  postgres:
    image: postgres:15
    env_file: .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - data_pipeline
    restart: always

  ingestion:
    build:
      context: .
      dockerfile: src/ingestion/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    env_file: .env
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      DATA_SOURCE: "data/raw/yelp_academic_dataset_business.json"
      BATCH_SIZE: 200  
    volumes:
      - ./src/ingestion:/app
      - ./data:/app/data
    command: python ingestion_service.py
    restart: on-failure
    networks:
      - data_pipeline

  processing:
    build:
      context: .
      dockerfile: src/processing/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file: .env
    environment:
      JAVA_HOME: /opt/bitnami/java
      SPARK_CONFIG: ${SPARK_CONFIG}
      DB_HOST: postgres
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      BATCH_SIZE: 500
    volumes:
      - ./src/processing:/app
      - ./data:/app/data
    command: python spark_processing.py
    networks:
      - data_pipeline
    restart: on-failure
  delivery:
    build:
      context: .
      dockerfile: src/delivery/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      API_SECRET_KEY: ${API_SECRET_KEY}
      DB_HOST: postgres
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
    ports:
      - "5001:5000"
    volumes:
      - ./src/delivery:/app
    command: python api_service.py
    networks:
      - data_pipeline
    restart: always
  airflow-init:
    image: apache/airflow:2.7.3
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      AIRFLOW_CONN_POSTGRES_DEFAULT: postgresql+psycopg2://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: >
      bash -c "airflow db migrate &&
               airflow users create --username admin --password ${DB_PASSWORD} --firstname Admin --lastname Admin --role Admin --email 0xtaskin@gmail.com || true"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - data_pipeline

  airflow-webserver:
    image: apache/airflow:2.7.3
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      AIRFLOW_CONN_POSTGRES_DEFAULT: postgresql+psycopg2://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    command: airflow webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - data_pipeline

  airflow-scheduler:
    image: apache/airflow:2.7.3
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      AIRFLOW_CONN_POSTGRES_DEFAULT: postgresql+psycopg2://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: airflow scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - data_pipeline